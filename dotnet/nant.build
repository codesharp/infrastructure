<?xml version="1.0"?>
<project name="codesharp" default="clean">
	<property name="runtime" value="dotnet" dynamic="true"/>
  <property name="args0" value="" dynamic="true"/>
  <property name="args1" value="" dynamic="true"/>
  <!--path-->
  <property name="dir" value="."/>
  <property name="dir.tools" value="..\..\work-tool"/>
  <property name="build.base" value="build"/>
  <property name="build.absolutepath" value="${path::get-full-path(build.base)}" />
  <!--nuget-->
  <property name="nuget" value="${path::get-full-path(dir.tools)}" />
  <property name="nuget.params.push" value="-s http://cs-nuget.apphb.com/ codesharp" />
  <!--msbuild-->
  <property name="msbuild" value="C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe" />
  <property name="msbuild.config" value="Release" dynamic="true"/>
  <property name="msbuild.params" value="/t:rebuild /p:Configuration=${msbuild.config} /t:ResolveReferences" />
  <property name="msbuild.params.weboutput" value="/t:_CopyWebApplication /p:WebProjectOutputDir=${build.absolutepath}" />
  <property name="msbuild.params.mvcoutput" value="/t:_CopyWebApplication /p:mvcbuildviews=true /p:WebProjectOutputDir=${build.absolutepath}" />
  <property name="msbuild.params.output" value="/p:OutputPath=${build.absolutepath}" />
  <!--xbuild for mono-->
  <if test="${runtime=='mono'}">
    <!--windows use xbuild.bat-->
    <property name="msbuild" value="xbuild"/>
  </if>
  <!--NUnit-->
  <property name="nunit" value="${path::get-full-path(dir.tools)}\nunit\nunit-console.exe" />
  
  <target name="clean" description="clean build folder">
    <delete dir="${build.absolutepath}"></delete>
  </target>
  <target name="nuget" description="nuget install and update">
    <if test="${runtime=='dotnet'}">
      <exec program="nuget.install.bat" commandline="" workingdir="${dir}" />
    </if>
    <if test="${runtime=='mono'}">
      <exec program="sh" commandline="nuget.install.sh" workingdir="${dir}" />
    </if>
  </target>

  <target name="all">
    <call target="core_net40"></call>
    <call target="core_castle_net40"></call>
    <call target="framework_net40"></call>
    <call target="framework_castle_net40"></call>
  </target>
  <target name="core_net40">
    <property name="libname" value="CodeSharp.Core" />
    <call target="lib_net40"></call>
  </target>
  <target name="core_castle_net40">
    <property name="libname" value="CodeSharp.Core.Castles" />
    <call target="lib_net40"></call>
  </target>
  <target name="framework_net40">
    <property name="libname" value="CodeSharp.Framework.Castles" />
    <call target="lib_net40"></call>
  </target>
  <target name="framework_castle_net40">
    <property name="libname" value="CodeSharp.Framework" />
    <call target="lib_net40"></call>
  </target>
  <target name="lib_net40">
    <mkdir dir="${build.absolutepath}" />
    <exec program="${msbuild}"
          commandline="${msbuild.params} ${msbuild.params.output} /p:DocumentationFile=${build.absolutepath}/${libname}.Xml"
          workingdir="${dir}\src\${libname}" />
    <copy todir="${build.absolutepath}/lib/net40">
      <fileset basedir="${build.absolutepath}">
        <include name="${libname}.dll" />
        <include name="${libname}.pdb" />
        <include name="${libname}.Xml" />
        <include name="${libname}.dll.mdb" />
      </fileset>
    </copy>
    <!--cancel below-->
    <if test="${args0=='pack'}">
      <exec program="${nuget}\nuget"
            commandline="pack nuspec\${libname}.nuspec -outputdirectory packages"
            workingdir="${dir}" />
    </if>
    <if test="${args1=='push'}">
      <exec program="${nuget}\nuget"
            commandline="push ${libname}.2.0.nupkg ${nuget.params.push}"
            workingdir="${dir}\packages" />
    </if>
  </target>

  <target name="test_core">
    <if test="${runtime=='dotnet'}">
      <exec program="${msbuild}"
            commandline="CodeSharp.Core.Castles.Test.csproj ${msbuild.params} ${msbuild.params.output}\core_test"
            workingdir="${dir}\src\CodeSharp.Core.Castles.Test" />
      <exec program="${nunit}" commandline="CodeSharp.Core.Castles.Test.dll" workingdir="${build.absolutepath}\core_test"/>
    </if>
    <if test="${runtime=='mono'}">
      <exec program="${msbuild}"
            commandline="${msbuild.params} ${msbuild.params.output}/core_test_mono CodeSharp.Core.Castles.Test-mono.csproj"
            workingdir="${dir}\src\CodeSharp.Core.Castles.Test" />
      <exec program="mono" commandline="${nunit} CodeSharp.Core.Castles.Test.dll" workingdir="${build.absolutepath}\core_test_mono"/>
    </if>
  </target>
  <target name="test_framework">
    <if test="${runtime=='dotnet'}">
      <exec program="${msbuild}"
            commandline="CodeSharp.Framework.Castles.Test.csproj ${msbuild.params} ${msbuild.params.output}\framework_test"
            workingdir="${dir}\src\CodeSharp.Framework.Castles.Test" />
      <exec program="${nunit}" commandline="CodeSharp.Framework.Castles.Test.dll" workingdir="${build.absolutepath}\framework_test"/>
    </if>
    <if test="${runtime=='mono'}">
      <exec program="${msbuild}"
            commandline="CodeSharp.Framework.Castles.Test-mono.csproj ${msbuild.params} ${msbuild.params.output}/framework_test_mono"
            workingdir="${dir}\src\CodeSharp.Framework.Castles.Test" />
      <exec program="mono" commandline="${nunit} CodeSharp.Framework.Castles.Test.dll" workingdir="${build.absolutepath}\framework_test_mono"/>
    </if>
  </target>

</project>
